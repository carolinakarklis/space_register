exit
res = HTTParty.post(@uri, body: @params, headers: @headers)  
@params
res = HTTParty.post(@uri, body: @params.to_json, headers: @headers)  
res.body
res.code
res = HTTParty.post(@uri, body: @params.to_json, headers: @headers)  
@params.to_json
@params
exit
res.code
res.body
res = SpaceCenterClient.new("http://localhost:3000/api/v1/space_vehicles/", params).post 
params
exit
SpaceCenterClient.new("http://localhost:3000/api/v1/space_vehicles/", params).post 
exit
body["message"]
exit
Result.new(true, record) 
record = body["data"].is_a?(Array) ? body["data"].map { |item| OpenStruct.new(item["attributes"]) } : OpenStruct.new(body["data"]["attributes"]) 
record = body["data"].map { |item| OpenStruct.new(item["attributes"]) } 
body["data"].map { |item| OpenStruct.new(item["attributes"]) } 
record = nil
 record = body["data"].is_a? Array ? body["data"].map { |item| OpenStruct.new(item["attributes"]) } : OpenStruct.new(body["data"]["attributes"]) 
require 'ostruct'
record = body["data"].is_a? Array ? body["data"].map { |item| OpenStruct.new(item["attributes"]) } : OpenStruct.new(body["data"]["attributes"])
 record = body["data"].is_a? Array ? body["data"].map { |item| OpenStruct.new(item["attributes"]) } : OpenStruct.new(body["data"]["attributes"]) 
body["data"].map { |item| OpenStruct.new(item["attributes"]) }
body["data"].is_a? Array
exit
body["data"]
body = JSON.parse(res.body)
res.code
body = JSON.parse(res.body) 
res.code
body = JSON.parse(res.body) 
res.body
res = HTTParty.get(@uri, headers: @headers) 
@uri = URI(url) 
url = 'http://localhost:3000/api/v1/space_vehicles/1' 
url
@uri
body["data"].map { |item| build_success_struct(item) } 
 body["data"].is_a? Array
exit
result
result = haa["data"].map { |record| p record["attributes"] } 
haa["data"].count
haa["data"].map { |record| p record["attributes"] } 
haa
haa["data"].is_a? Array
haa["data"]
haa
haa = JSON.parse(res.body)
h = JSON.parse(res.body)
h = JSON.parse(res.body)["data"][0]
JSON.parse(res.body)["data"][0]["attributes"]
OpenStruct.new(h) 
h = {"name"=>"Big Rocket 2.0", "km_per_hour"=>100, "travel_count"=>0} 
JSON.parse(res.body)["data"][0]["attributes"]
h = JSON.parse(res.body)["data"][0]["attributes"]
JSON.parse(res.body)["data"][0]["attributes"]
h = JSON.parse(res.body)["data"][0]["attributes"]
require 'ostruct' 
JSON.parse(res.body)["data"][0]["attributes"]
JSON.parse(res.body)["data"][0]["attributes]
JSON.parse(res.body)["data"]
res.body['data']
res.body
res.code == 200
res.code.ok?
res.code
res
